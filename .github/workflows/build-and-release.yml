name: Multi-Target Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger only on tag pushes.

jobs:
  build-and-release:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]
        preset: [linux, windows]
    runs-on: ${{ matrix.os }}

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Install Dependencies
      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo apt-get install -y clang-18 lld-18 cmake ninja-build
          clang-18 --version
          cmake --version
          ninja --version

      - name: Install Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install llvm cmake ninja --installargs 'ADD_CMAKE_TO_PATH=System' --yes
          setx PATH "%PATH%;C:\Program Files\LLVM\bin"
          setx PATH "%PATH%;C:\Program Files (x86)\LLVM\bin"
          dir C:\Program Files\LLVM\bin /s /b /o:gn
          clang-cl --version
          cmake --version
          ninja --version

      # Configure Build
      - name: Configure Build
        run: cmake --preset=${{ matrix.preset }}-release

      # Build Project
      - name: Build Project
        run: |
          cmake --build build/release/${{ matrix.preset }}

      # Upload Linux Binary
      - name: Upload Linux Binary
        if: matrix.os == 'ubuntu-22.04'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./bin/app
          asset_name: app-linux
          asset_content_type: application/octet-stream

      # Upload Windows Binary
      - name: Upload Windows Binary
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./bin/app.exe 
          asset_name: app-windows.exe
          asset_content_type: application/octet-stream
